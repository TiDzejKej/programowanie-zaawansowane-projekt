@model string
@{
    ViewData["Title"] = "Scheduler";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<button class="btn btn-primary mb-2" id="export-button">Eksportuj do formatu .ical</button>
<div id="scheduler"></div>


<script>
    document.getElementById('export-button').addEventListener('click', async function () {
        try {
            const response = await fetch('Scheduler/ExportLessons', {
                method: 'GET'
            });
            console.log(response);
            if (!response.ok) {
                throw new Error('Błąd podczas pobierania pliku');
            }

            const blob = await response.blob();

            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'zajecia.ics';
            document.body.appendChild(a);
            a.click();

            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        } catch (error) {
            console.error('Błąd:', error);
            alert('Wystąpił problem podczas eksportu.');
        }
    });
document.addEventListener("DOMContentLoaded", function () {
    const userRole = "@Model";
    var groupList = [];
    let isUpdatingEvent = false;

    setTimeout(() => {
       const element = document.querySelector('a.e-license');
    if (element) {
        const parentElement = element.parentElement;
        parentElement.remove();
    } 
    }, 0);
    

    fetch('/Scheduler/GetGroups')
        .then(response => response.json())
        .then(data => {
            groupList = data;
        });

    var scheduleObj = new ej.schedule.Schedule({
        height: '550px',
        selectedDate: new Date(),
        timezone: 'Europe/Paris',
        eventSettings: {
            dataSource: [],
            fields: {
                id: 'Id',
                subject: { name: 'Subject' },
                startTime: { name: 'StartTime' },
                endTime: { name: 'EndTime' },
                description: { name: 'Description' },
                groupId: { name: 'GroupId' },
                isClosed: { name: 'IsClosed' },
                hasSurvey: { name: 'HasSurvey'}

            }
        },
        eventRendered: function (args) {
            if (args.data.IsClosed) {
                args.element.style.backgroundColor = '#f54949';
                args.element.style.color = 'white';
              }
              else
              {
                   args.element.style.backgroundColor = '#3f51b5';
                  args.element.style.color = 'white';
              }
        },
        popupOpen: function (args) {
            document.querySelector(".e-button-finish-task")?.remove();
            var scheduleObj = this;
            if (args.type === "QuickInfo") {
                args.cancel = true;

                scheduleObj.openEditor(args.data, args.target.classList.contains('e-appointment') ? 'Save' : 'Add');
            }

            if (args.type === "Editor") {
                var formElement = args.element.querySelector('.e-schedule-form');
               
                var locationField = formElement.querySelector('.e-location-container');
                if (locationField) locationField.style.display = 'none';

                var allDayField = formElement.querySelector('.e-all-day-time-zone-row');
                if (allDayField) allDayField.style.display = 'none';

                var timeZoneField = formElement.querySelector('.e-time-zone-container');
                if (timeZoneField) timeZoneField.style.display = 'none';

                var repeatField = formElement.querySelector('.e-recurrenceeditor');
                if (repeatField) repeatField.style.display = 'none';

                var groupField = formElement.querySelector('.custom-group-field');
                if (groupField) {
                    groupField.remove();
                }

                var container = document.createElement('div');
                container.className = 'e-field custom-group-field';
                container.setAttribute('data-name', 'GroupId');
                container.innerHTML = `
                    <div id="GroupId"></div>
                `;
                formElement.appendChild(container);
                (args.data.GroupId != "undefined" && args.data.GroupId != null) ? args.data.GroupId = parseInt(args.data.GroupId) : '';
                var groupDropdown = new ej.dropdowns.DropDownList({
                    dataSource: groupList.map(group => ({
                        value: group.id,
                        text: `(Grupa: ${group.name}) (Teacher: ${group.teacher})`
                    })),
                    fields: { text: 'text', value: 'value' },
                    placeholder: "Select Group",
                    value: args.data.GroupId || null,
                    allowFiltering: true,
                    enabled: userRole !== "lecturer" || userRole !== "student"
                });
                groupDropdown.appendTo('#GroupId');

                if (userRole === "lecturer" && !args.data.IsClosed) {
                    var finishButton = document.createElement('button');
                    finishButton.textContent = "Zakończ zajęcia";
                    finishButton.className = 'e-btn e-primary e-event-finish e-button-finish-task';
                    finishButton.style.marginTop = '10px';
                    finishButton.addEventListener('click', function () {
                        fetch('/Scheduler/CloseLesson', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ LessonId: args.data.Id })
                        })
                            .then(response => response.json())
                            .then(result => {
                                if (result.success) { 
                                    args.data.IsClosed = true;
                                    finishButton.remove();
                                    isUpdatingEvent = true;
                                    console.log(args);
                                    scheduleObj.saveEvent(args.data);
                                    isUpdatingEvent = false;
                                    alert("Zadanie zostało zakończone.");
                                    
                                    
                                } else {
                                    alert("Nie udało się zakończyć zadania: " + result.message);
                                }
                            })
                            .catch(err => {
                                console.error("Błąd podczas zamykania zadania:", err);
                            });
                    });

                    formElement.appendChild(finishButton);
                }

                if (userRole === "student" && !!args.data.IsClosed && !args.data.HasSurvey) {
                   var finishButton = document.createElement('a');
                    finishButton.textContent = "Przejdź do ankiety";
                    finishButton.className = 'e-btn e-primary e-event-finish e-button-finish-task';
                    finishButton.style.marginTop = '10px';
                    finishButton.style.backgroundColor = 'green';
                    finishButton.style.color = 'white'; 
                    finishButton.style.textDecoration = 'none';
                    finishButton.href = '/Survey/Create?LessonId=' + args.data.Id;
                    finishButton.target = '_self';
                    formElement.appendChild(finishButton);
                }

              if (userRole === "lecturer" || userRole === "student") {
                    var titleElement = args.element.querySelector('.e-popup-header .e-title, .e-title-text');
                    if (titleElement) {
                        titleElement.textContent = "View event";
                    }

                    var inputs = args.element.querySelectorAll('input, textarea, select, .custom-group-field');
                    inputs.forEach(input => {
                        input.setAttribute('disabled', 'true');
                    });

                    var saveButton = args.element.querySelector('.e-event-save');
                    var deleteButton = args.element.querySelector('.e-event-delete');
                    if (saveButton) saveButton.style.display = 'none';
                    if (deleteButton) deleteButton.style.display = 'none';

                    var recurrenceButton = args.element.querySelector('.e-recurrence-editor');
                    if (recurrenceButton) recurrenceButton.style.display = 'none';

                    var cancelButton = args.element.querySelector('.e-event-cancel');
                    if (cancelButton) cancelButton.style.display = 'none';
                }
            }
        }
        ,
        actionBegin: function (args) {
            if(!!isUpdatingEvent)
            {
                return;
            }
            if (userRole === "lecturer" || userRole === "student") {
            if (args.requestType === 'eventCreate' || args.requestType === 'eventChange' || args.requestType === 'eventRemove') {
                args.cancel = true;
                return;
            }
        }
    if (args.requestType === 'eventCreate') {
        var data = args.data[0];
        var groupId = document.getElementById('GroupId_hidden').value;
        data.GroupId = groupId;
        (args.data.GroupId != "undefined" && args.data.GroupId != null) ? args.data.GroupId = parseInt(args.data.GroupId) : '';
        

        args.cancel = true;

        fetch('/Scheduler/ValidateLesson', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                Id: null,
                StartTime: new Date(data.StartTime).toISOString(),
                EndTime: new Date(data.EndTime).toISOString(),
                GroupId: data.GroupId
            })
        })
        .then(response => response.json())
        .then(result => {
            if (result.success) {
                fetch('/Scheduler/AddLesson', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        Title: data.Subject,
                        StartTime: new Date(data.StartTime).toISOString(),
                        EndTime: new Date(data.EndTime).toISOString(),
                        Description: data.Description || "",
                        GroupId: data.GroupId
                    })
                }).then(response => response.json())
                .then(result => {
                    if (result.success) {
                        isUpdatingEvent = true;
                        alert(result.message);
                        scheduleObj.addEvent(data);
                        isUpdatingEvent = false;
                    } else {
                        alert("Failed to add lesson!");
                    }
                });
            } else {
                alert("Validation failed: " + result.message);
                scheduleObj.refresh();
            }
        });
    }

    if (args.requestType === 'eventChange') {
    var updatedEvent = args.data;
    

    if (!updatedEvent.GroupId || updatedEvent.GroupId === "undefined") {
        var groupId = document.getElementById('GroupId_hidden')?.value;
        updatedEvent.GroupId = groupId;
    }

    args.cancel = true;

    fetch('/Scheduler/ValidateLesson', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            Id: updatedEvent.Id,
            StartTime: new Date(updatedEvent.StartTime).toISOString(),
            EndTime: new Date(updatedEvent.EndTime).toISOString(),
            GroupId: parseInt(updatedEvent.GroupId)
        })
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            fetch('/Scheduler/UpdateLesson', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    Id: updatedEvent.Id,
                    Title: updatedEvent.Subject,
                    StartTime: new Date(updatedEvent.StartTime).toISOString(),
                    EndTime: new Date(updatedEvent.EndTime).toISOString(),
                    Description: updatedEvent.Description || "",
                    GroupId: parseInt(updatedEvent.GroupId)
                })
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    alert("Lesson updated successfully!");
                    isUpdatingEvent = true;
                    scheduleObj.saveEvent(updatedEvent);
                    isUpdatingEvent = false;
                    
                } else {
                    alert("Failed to update lesson!");
                    scheduleObj.refresh();
                }
            });
        } else {
            alert("Validation failed: " + result.message);
            scheduleObj.refresh();
        }
    });
}


    if (args.requestType === 'eventRemove') {
        var deletedEvent = args.data[0];

       
        args.cancel = true;

        fetch('/Scheduler/DeleteLesson', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                Id: deletedEvent.Id
            })
        }).then(response => response.json())
        .then(result => {
            if (result.success) {
                isUpdatingEvent = true;
                scheduleObj.deleteEvent(deletedEvent);
                isUpdatingEvent = false;
                alert("Lesson deleted successfully!");
                
                
            } else {
                alert("Failed to delete lesson!");
                scheduleObj.refresh();
            }
        });
    }
}

    });

    fetch('/Scheduler/GetLessons')
        .then(response => response.json())
        .then(data => {
            let mappedData = data.map(event => ({
                Id: event.id,
                Subject: event.title,
                StartTime: new Date(event.startTime),
                EndTime: new Date(event.endTime),
                Description: event.description,
                GroupId: event.groupId,
                IsClosed: event.isClosed,
                HasSurvey: event.hasSurvey
            }));
            scheduleObj.eventSettings.dataSource = mappedData;
        });

    scheduleObj.appendTo('#scheduler');
});

</script>
